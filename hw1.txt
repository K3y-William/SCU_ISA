// input a x1, output b x2, N x3, 0 x0

    INC x5,  x0,  1          // x5 = 1

    // b[0] = a[0]
    LD  x6,  x1,  0          // x6 = a[0]
    ST  x6,  x2,  0          // b[0] = a[0]

    // i = 1
    INC x4,  x0,  1

LOOP:
    // stop when i == n-1
    SUB x8,  x4,  x3         // x8 = i - n
    INC x8,  x8,  1          // x8 = i - (n-1)
    BRZ DONE_INNER           // if i == n-1 -> exit loop

    // window: a[i-1], a[i], a[i+1]
    SUB x11, x4,  x5         // x11 = i-1
    LD  x6,  x1,  x11        // x6 = a[i-1]
    LD  x7,  x1,  x4         // x7 = a[i]
    ADD x11, x4,  x5         // x11 = i+1
    LD  x9,  x1,  x11        // x9 = a[i+1]

    // ---- median(x6,x7,x9) -> x7 ----
    // if x6 > x7: swap(x6,x7)
    SUB x8,  x6,  x7
    BRN S1                    // x6<x7 keep; if = also keep
    BRZ S1
    // swap x6,x7 
    ADD x10, x6,  x0         
    ADD x6,  x7,  x0         
    ADD x7,  x10, x0         
S1:
    // if x7 > x9: swap(x7,x9)
    SUB x8,  x7,  x9
    BRN S2
    BRZ S2
    // swap x7,x9
    ADD x10, x7,  x0
    ADD x7,  x9,  x0
    ADD x9,  x10, x0
S2:
    // if x6 > x7: swap(x6,x7)
    SUB x8,  x6,  x7
    BRN S3
    BRZ S3
    // swap x6,x7
    ADD x10, x6,  x0
    ADD x6,  x7,  x0
    ADD x7,  x10, x0
S3:
    // x7 is median(a[i-1], a[i], a[i+1])

    ST  x7,  x2,  x4         // b[i] = median
    INC x4,  x4,  1          // i++
    J   LOOP

DONE_INNER:
    // --- b[n-1] = a[n-1] ---
    SUB x11, x3,  x5         // x11 = n-1
    LD  x6,  x1,  x11        // x6 = a[n-1]
    ST  x6,  x2,  x11        // b[n-1] = a[n-1]
    NOP
